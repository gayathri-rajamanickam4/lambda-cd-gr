AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Outputs the time

Globals:

  Function:
    Runtime: nodejs8.10

    Environment:
      Variables:
        APP_NAME: GiftApp

  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    # Cors:
    #  AllowMethods: "'*'"
    #  AllowHeaders: "'*'"
    #  AllowOrigin: "'*'"
    #Cors: "'http://localhost:3000'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

    EndpointConfiguration: REGIONAL


Resources:


  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: HelloLambdaFunction
      Handler: hello.handler
      Runtime: nodejs6.10
      CodeUri: ./
      Policies: AmazonDynamoDBFullAccess
      Events:
        HelloGetApi:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
        HelloPostApi:
          Type: Api
          Properties:
            Path: /hello
            Method: POST
        HelloPutApi:
          Type: Api
          Properties:
            Path: /hello
            Method: PUT
        HelloDeleteApi:
          Type: Api
          Properties:
            Path: /hello
            Method: DELETE

  
  RequestUnicornFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RequestUnicorn
      Runtime: nodejs8.10
      Role: !GetAtt RequestUnicornExecutionRole.Arn
      Timeout: 5
      MemorySize: 128
      Handler: hello.handler
      CodeUri: ./
      Policies: AmazonDynamoDBFullAccess
 
            
  GetMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: GetMoviesFunction
      Handler: lambdas/movies/getMovies.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetMoviesApi:
          Type: Api
          Properties:
            Path: /movies
            Method: GET

  GetMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: GetMovieFunction
      Handler: lambdas/movies/getMovie.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetMovieApi:
          Type: Api
          Properties:
            Path: /movies/{id}
            Method: GET

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: GetCategoriesFunction
      Handler: lambdas/category/getCategories.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoriesApi:
          Type: Api
          Properties:
            Path: /categories
            Method: GET

  GetCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: GetCategoryFunction
      Handler: lambdas/category/getCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: GET

  PostCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: PostCategoryFunction
      Handler: lambdas/category/postCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: POST

  PutCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: PutCategoryFunction
      Handler: lambdas/category/putCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: PUT

  DeleteCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: DeleteCategoryFunction
      Handler: lambdas/category/deleteCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: DELETE

  AuthTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: DeleteCategoryFunction
      Handler: lambdas/auth/test.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /auth-test
            Method: GET

  WildRydesApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: WildRydes
        Body:
          swagger: 2.0
          info:
            version: 1.0.0
            title: WildRydes
          paths:
            /ride:
              post:
                description: Requests a new ride
                consumes:
                  - application/json
                produces:
                  - application/json
                security:
                  - CognitoAuthorizer: []
                responses:
                  "200":
                    description: "200 response"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: 200
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  uri: 
                    Fn::Join:
                      - ""
                      - - "arn:aws:apigateway:"
                        - !Ref AWS::Region
                        - ":lambda:path/2015-03-31/functions/"
                        - !GetAtt RequestUnicornFunction.Arn
                        - "/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws_proxy"
              options:
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          securityDefinitions:
            CognitoAuthorizer:
              type: "apiKey"
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                providerARNs:
                  - arn:aws:cognito-idp:ap-southeast-1:222144040228:userpool/ap-southeast-1_gkSXQE78N
                type: "cognito_user_pools"

  RequestUnicornExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: WildRydesLambda
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Path: "/wildrydes/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


  WildRydesApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Prod deployment for wild Rydes API
      RestApiId: !Ref WildRydesApi
      StageName: prod         